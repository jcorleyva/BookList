<?xml version="1.0" encoding="utf-8"?>

<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->

<configuration>

  <configSections>
    <sectionGroup name="elmah">
      <!-- NOTE! If you are using ASP.NET 1.x then remove the
                 requirePermission="false" attribute from the section
                 elements below as those are only needed for
                 partially trusted applications in ASP.NET 2.0 -->
      <section name="security" requirePermission="false" type="Elmah.SecuritySectionHandler, Elmah" />
      <section name="errorLog" requirePermission="false" type="Elmah.ErrorLogSectionHandler, Elmah" />
      <section name="errorMail" requirePermission="false" type="Elmah.ErrorMailSectionHandler, Elmah" />
      <section name="errorFilter" requirePermission="false" type="Elmah.ErrorFilterSectionHandler, Elmah" />
      <section name="errorTweet" requirePermission="false" type="Elmah.ErrorTweetSectionHandler, Elmah" />
    </sectionGroup>

  </configSections>

  <appSettings>
    <add key="ReadWriteGroup" value="USATODAY\VIR.ED.BKLIST.GRP" />
    <add key="ReadOnlyGroup" value="USATODAY\VIR.ED.BKLIST.GRP" />
    <add key="ImportConnectionString" value="USATodayBookList" />
    <add key="ReportPublishingPath" value="PublishedReports"/>
    <add key="ReportFileFormat" value="TAB"/>
    <add key="Top150ReportFileFormat" value="PDF"/>
    <add key="ReportWebService" value="http://usat-vocprddb02/ReportServer/ReportExecution2005.asmx"/>
  </appSettings>

  <connectionStrings>

    <add name="USATodayBookListEntities" connectionString="metadata=res://*/BookListModel.csdl|res://*/BookListModel.ssdl|res://*/BookListModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=usat-vocprddb02;Initial Catalog=USATodayBookList;uid=booksuser;pwd=63M{2#74*k,{)[4;MultipleActiveResultSets=True&quot;" providerName="System.Data.EntityClient" />
    <add name="USATodayBookList" connectionString="Data Source=usat-vocprddb02;Initial Catalog=USATodayBookList;uid=booksuser;pwd=63M{2#74*k,{)[4;MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" />
  </connectionStrings>

  <system.web>
    <compilation debug="true" targetFramework="4.0">
      <assemblies>
        <add assembly="Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A" />
        <add assembly="System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A" />
      </assemblies>
    </compilation>
    <customErrors mode="Off" />


    <authentication mode="Windows">
    </authentication>



    <httpModules>

      <!-- 
                Uncomment the entry below if all of the following are true: 
                1) you are using wildcard mapping in IIS 5.x
                2) you are not using .Net 1.0
                3) you are experiencing http 404 errors when trying to view
                   elmah.axd or elmah.axd/detail?id=* etc
            -->
      <!--<add name="FixIIS5xWildcardMapping" type="Elmah.FixIIS5xWildcardMappingModule, Elmah"/>-->

      <!-- 
                Uncomment the entry below if you are using MS Ajax v1.0.x.x
                and want to capture errors during Partial Postbacks
                NB This is not required for the version of Ajax shipped with .Net Framework v3.5!
            -->
      <!--<add name="MsAjaxDeltaErrorLog" type="Elmah.MsAjaxDeltaErrorLogModule, Elmah"/>-->

      <add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" />

      <!-- 
                Uncomment the entries below if error mail reporting 
                and filtering is desired.
            -->

      <!--<add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" />-->
      <!--<add name="ErrorFilter" type="Elmah.ErrorFilterModule, Elmah"/>-->
      <!--<add name="ErrorTweet" type="Elmah.ErrorTweetModule, Elmah"/>-->

    </httpModules>

    <httpHandlers>

      <!-- 
                This entry provides the UI for the error log at
                elmah.axd below the application path. For example,
                if your domain is www.example.com and your application
                is at the root, then you can view the error log by
                visiting the following URL:
                
                http://www.example.com/elmah.axd
                
                IMPORTANT! To secure this location, consult the
                following notes:
                
                http://code.google.com/p/elmah/wiki/SecuringErrorLogPages
            -->

      <add verb="POST,GET,HEAD" path="elmah.axd" type="Elmah.ErrorLogPageFactory, Elmah" />
    </httpHandlers>

  </system.web>

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true">
      <add name="ErrorLog" type="Elmah.ErrorLogModule, Elmah" preCondition="managedHandler" />
    </modules>


    <handlers>
      <add name="Elmah" path="elmah.axd" verb="POST,GET,HEAD" type="Elmah.ErrorLogPageFactory, Elmah" preCondition="integratedMode" />
    </handlers>
    <defaultDocument>
      <files>
        <add value="default.aspx" />
      </files>
    </defaultDocument>
  </system.webServer>

  <elmah>

    <security allowRemoteAccess="1" />

    <!--
            Use to log errors to Microsoft SQL Server 2000 or 2005
            using ASP.NET 2.0. Set value of connectionStringName attribute
            to the name of the connection string settings to use from
            the <connectionStrings> section.
          -->
    <errorLog type="Elmah.SqlErrorLog, Elmah" connectionStringName="USATodayBookList" />


    <!--
            Use to log errors to Microsoft SQL Server 2000 or 2005
            using ASP.NET 1.x and adjust the value of connectionString 
            attribute to your settings.

        <errorLog type="Elmah.SqlErrorLog, Elmah" 
            connectionString="Data Source=.;Initial Catalog=ELMAH;Trusted_Connection=True" />
        -->

    <!--
            Use to log errors to MySQL 5.0+  Set value of connectionStringName attribute
            to the name of the connection string settings to use from the <connectionStrings>
            section.

        <errorLog type="Elmah.MySqlErrorLog, Elmah" 
            connectionString="..." />
        -->

    <!--
             Use to log errors to a SQL Server Compact 4 database file (requires .NET 3.5 SP1) 
             Set value of connectionStringName attribute to 
             the name of the connection string settings to 
             use from the <connectionStrings> section.
    
          <errorLog type="Elmah.SqlServerCompactErrorLog, Elmah" connectionStringName="..." />

             The format of the connection string should be as follows:
    
          <connectionStrings>
            <add name="..." connectionString="data source=[path to the database file]" />
          </connectionStrings>
    
            Replace the content of the brackets with a file name, for example:
    
          data source=C:\Elmah.sdf
    
             If the database file doesn't exist it is created automatically.
             You can also place the file in the App_Data folder, by using the |DataDirectory| macro:
    
          <connectionStrings>
             <add name="..." connectionString="data source=|DataDirectory|\Elmah.sdf" />
          </connectionStrings>

      -->

    <!--
            Use to log errors to SQLite using ASP.NET 2.0. 
            Set value of connectionStringName attribute to 
            the name of the connection string settings to 
            use from the <connectionStrings> section.
            
        <errorLog type="Elmah.SQLiteErrorLog, Elmah" connectionStringName="..." />
        
            The format of the connection string should be as follows:
            
        <connectionStrings>
          <add name="..." connectionString="data source=[path to the database file]" />
        </connectionStrings>
            
            Replace the content of the brackets with a file name, for example:
            
        data source=C:\Elmah.db
            
            If the database file doesn't exist it is created automatically.
            To specify a path relative to and below the application root, 
            start with the root operator (~) followed by a forward slash (/), 
            as it is common in ASP.NET applications. For example:
            
        data source=~/App_Data/Error.db
        -->

    <!--
            Use to log errors into separate XML files that are stored on 
            disk at the path specified in the logPath attribute.

        <errorLog type="Elmah.XmlFileErrorLog, Elmah" logPath="..." />
        -->

    <!--
            Use to log errors to Oracle
            using ASP.NET 2.0. Set value of connectionStringName attribute
            to the name of the connection string settings to use from
            the <connectionStrings> section.
        
            The schemaOwner parameter is *optional*. Use this if the owner of the
            ELMAH package (pkg_elmah$error) is not the same user that you are 
            using to connect to the database.
            
        <errorLog type="Elmah.OracleErrorLog, Elmah" 
            schemaOwner="xxx" />
            connectionStringName="..." />
        -->

    <!--
            Use to log errors to Oracle
            using ASP.NET 1.1 and adjust the value of connectionString 
            attribute to your settings.

            The schemaOwner parameter is *optional*. Use this if the owner of the
            ELMAH package (pkg_elmah$error) is not the same user that you are 
            using to connect to the database.

        <errorLog type="Elmah.OracleErrorLog, Elmah" 
            schemaOwner="xxx" />
            connectionString="Data Source=xxxx;User ID=username;Password=password" />
        -->

    <!--
            Use to log errors to Microsoft Access
            using ASP.NET 1.x and adjust the value of connectionString 
            attribute to your settings.
            Use Elmah.mdb as your database.

        <errorLog type="Elmah.AccessErrorLog, Elmah" 
            connectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=|DataDirectory|Elmah.mdb" />
        -->

    <!--
            Use to log errors to Microsoft Access
            using ASP.NET 2.0. Set value of connectionStringName attribute
            to the name of the connection string settings to use from
            the <connectionStrings> section.
            Use Elmah.mdb as your database.
        
        <errorLog type="Elmah.AccessErrorLog, Elmah" 
            connectionStringName="..." />
        -->

    <!--
            Use to log errors to PostgresSQL 
            using ASP.NET 2.0. Set value of connectionString to a 
			valid Npgsql connection string.
        
		<errorLog type="Elmah.PgsqlErrorLog, Elmah" 
            connectionString="Server=...;Port=...;Database=...;User Id=...;Password=...;" />
        -->

    <!--
            Use to send error reports by e-mail and adjust the attributes
            according to settings desired. Note that only the from and
            to attributes are required. The rest are optional and may
            be removed. If the SMTP server does not require authentication,
            you MUST remove the userName and password attributes or
            set them to empty values (resulting in zero-length strings).
            If you are using ELMAH compiled for .NET Framework 1.x, then
            the to attribute may contain multiple recipient addresses,
            each of which must be delimited by a semi-colon(;). If you are 
            using ELMAH compiled for .NET Framework 2.0 or later, then the
            to attribute may contain multiple recipient addresses,
            each of which must be delimited by a comma (,).

        <errorMail 
            from="elmah@example.com" 
            to="admin@example.com" 
            subject="..."
            priority="Low|Normal|High"
            async="true|false"
            smtpPort="25"
            smtpServer="smtp.example.com" 
            useSsl="true|false"
            userName="johndoe"
            password="secret" 
            noYsod="true|false" />
        -->

    <!--
            Use to send short error messages to a twitter account.
        <errorTweet 
            userName="johndoe" 
            password="secret" />
        -->

    <!--
            Use to prevent errors from being mailed or logged based on
            assertions. An assertion evaluates the current context, resulting
            in a Boolean outcome. An error is filtered if the assertion results
            in true. For a more detailed explanation, see:
            
            http://code.google.com/p/elmah/wiki/ErrorFiltering
            
            The example below will filter errors when any of the
            following conditions occur:
            
            - The status code is set to 404 
            - The root/base cause is System.IO.FileNotFoundException
            - The root/base cause is System.Web.HttpRequestValidationException
            - The user agent making the request identifies itself as "crawler"
            - The request is from the local machine
            
            The assertion below is expressed as a JScript expression and is the
            most generic and simplest of the assertions to use if you are
            familiar with the JavaScript language. It can work in Medium and
            Full trust environments.

        <errorFilter>
            <test>
                <jscript>
                    <expression>
                    <![CDATA[
                    // @assembly mscorlib
                    // @assembly System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
                    // @import System.IO
                    // @import System.Web

                    HttpStatusCode == 404
                    || BaseException instanceof FileNotFoundException 
                    || BaseException instanceof HttpRequestValidationException
                    /* Using RegExp below (see http://msdn.microsoft.com/en-us/library/h6e2eb7w.aspx) */
                    || Context.Request.UserAgent.match(/crawler/i)                      
                    || Context.Request.ServerVariables['REMOTE_ADDR'] == '127.0.0.1' // IPv4 only
                    ]]>
                    </expression>
                </jscript>
            </test>
        </errorFilter>
        -->

  </elmah>
</configuration>
